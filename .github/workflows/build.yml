name: Build and Test

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

permissions:
  contents: read
  statuses: write

jobs:
  build-and-test-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: ['8.0.x'] 

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      working-directory: DatovkaSharp
      run: dotnet restore DatovkaSharp.slnx

    - name: Build
      working-directory: DatovkaSharp
      run: dotnet build DatovkaSharp.slnx --no-restore

    - name: Test
      working-directory: DatovkaSharp
      run: dotnet test DatovkaSharp.slnx --no-build --verbosity normal

    - name: Update GitHub status check
      if: always()
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Build and Test (Ubuntu)'
        description: 'The tests ${{ job.status == ''success'' && ''passed'' || ''failed'' }}'
        state: ${{ job.status == 'success' && 'success' || 'failure' }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
        target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  build-netstandard20-ubuntu:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build DatovkaSharp for netstandard2.0
      working-directory: DatovkaSharp
      run: dotnet build DatovkaSharp/ --framework netstandard2.0

    - name: Update GitHub status check
      if: always()
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Build (netstandard2.0 - Ubuntu)'
        description: 'The build for netstandard2.0 ${{ job.status == ''success'' && ''passed'' || ''failed'' }}'
        state: ${{ job.status == 'success' && 'success' || 'failure' }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
        target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  build-net8-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build DatovkaSharp for net8.0
      working-directory: DatovkaSharp
      run: dotnet build DatovkaSharp/ --framework net8.0

    - name: Update GitHub status check
      if: always()
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Build (net8.0 - Windows)'
        description: 'The build for net8.0 ${{ job.status == ''success'' && ''passed'' || ''failed'' }}'
        state: ${{ job.status == 'success' && 'success' || 'failure' }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
        target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

  build-and-test-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      working-directory: DatovkaSharp
      run: dotnet restore DatovkaSharp.slnx

    - name: Build
      working-directory: DatovkaSharp
      run: dotnet build DatovkaSharp.slnx --no-restore

    - name: Test
      working-directory: DatovkaSharp
      run: dotnet test DatovkaSharp.slnx --no-build --verbosity normal

    - name: Update GitHub status check
      if: always()
      uses: Sibz/github-status-action@v1
      with: 
        authToken: ${{secrets.GITHUB_TOKEN}}
        context: 'Build and Test (Windows)'
        description: 'The tests ${{ job.status == ''success'' && ''passed'' || ''failed'' }}'
        state: ${{ job.status == 'success' && 'success' || 'failure' }}
        sha: ${{ github.event.pull_request.head.sha || github.sha }}
        target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

