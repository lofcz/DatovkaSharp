//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatovkaSharp.Services.Stat
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://isds.czechpoint.cz/v20", ConfigurationName="DatovkaSharp.Services.Stat.IsdsStatPortType")]
    public interface IsdsStatPortType
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<DatovkaSharp.Services.Stat.NumOfMessagesResponse> NumOfMessagesAsync(DatovkaSharp.Services.Stat.NumOfMessagesRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isds.czechpoint.cz/v20")]
    public partial class tNumOfMessagesInput
    {
        
        private string statTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger", IsNullable=true, Order=0)]
        public string statType
        {
            get
            {
                return this.statTypeField;
            }
            set
            {
                this.statTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isds.czechpoint.cz/v20")]
    public partial class tStatReqStatus
    {
        
        private string dbStatusCodeField;
        
        private string dbStatusMessageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string dbStatusCode
        {
            get
            {
                return this.dbStatusCodeField;
            }
            set
            {
                this.dbStatusCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string dbStatusMessage
        {
            get
            {
                return this.dbStatusMessageField;
            }
            set
            {
                this.dbStatusMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://isds.czechpoint.cz/v20")]
    public partial class tNumOfMessagesOutput
    {
        
        private string statResultField;
        
        private System.DateTime statTimeField;
        
        private tStatReqStatus dbStatusField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer", IsNullable=true, Order=0)]
        public string statResult
        {
            get
            {
                return this.statResultField;
            }
            set
            {
                this.statResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public System.DateTime statTime
        {
            get
            {
                return this.statTimeField;
            }
            set
            {
                this.statTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public tStatReqStatus dbStatus
        {
            get
            {
                return this.dbStatusField;
            }
            set
            {
                this.dbStatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NumOfMessagesRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://isds.czechpoint.cz/v20", Order=0)]
        public DatovkaSharp.Services.Stat.tNumOfMessagesInput NumOfMessages;
        
        public NumOfMessagesRequest()
        {
        }
        
        public NumOfMessagesRequest(DatovkaSharp.Services.Stat.tNumOfMessagesInput NumOfMessages)
        {
            this.NumOfMessages = NumOfMessages;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class NumOfMessagesResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="NumOfMessagesResponse", Namespace="http://isds.czechpoint.cz/v20", Order=0)]
        public DatovkaSharp.Services.Stat.tNumOfMessagesOutput NumOfMessagesResponse1;
        
        public NumOfMessagesResponse()
        {
        }
        
        public NumOfMessagesResponse(DatovkaSharp.Services.Stat.tNumOfMessagesOutput NumOfMessagesResponse1)
        {
            this.NumOfMessagesResponse1 = NumOfMessagesResponse1;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public interface IsdsStatPortTypeChannel : DatovkaSharp.Services.Stat.IsdsStatPortType, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "8.0.0")]
    public partial class IsdsStatPortTypeClient : System.ServiceModel.ClientBase<DatovkaSharp.Services.Stat.IsdsStatPortType>, DatovkaSharp.Services.Stat.IsdsStatPortType
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IsdsStatPortTypeClient() : 
                base(IsdsStatPortTypeClient.GetDefaultBinding(), IsdsStatPortTypeClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.IsdsStatPortType.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IsdsStatPortTypeClient(EndpointConfiguration endpointConfiguration) : 
                base(IsdsStatPortTypeClient.GetBindingForEndpoint(endpointConfiguration), IsdsStatPortTypeClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IsdsStatPortTypeClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IsdsStatPortTypeClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IsdsStatPortTypeClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IsdsStatPortTypeClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IsdsStatPortTypeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<DatovkaSharp.Services.Stat.NumOfMessagesResponse> DatovkaSharp.Services.Stat.IsdsStatPortType.NumOfMessagesAsync(DatovkaSharp.Services.Stat.NumOfMessagesRequest request)
        {
            return base.Channel.NumOfMessagesAsync(request);
        }
        
        public System.Threading.Tasks.Task<DatovkaSharp.Services.Stat.NumOfMessagesResponse> NumOfMessagesAsync(DatovkaSharp.Services.Stat.tNumOfMessagesInput NumOfMessages)
        {
            DatovkaSharp.Services.Stat.NumOfMessagesRequest inValue = new DatovkaSharp.Services.Stat.NumOfMessagesRequest();
            inValue.NumOfMessages = NumOfMessages;
            return ((DatovkaSharp.Services.Stat.IsdsStatPortType)(this)).NumOfMessagesAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        #if !NET6_0_OR_GREATER
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        #endif
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IsdsStatPortType))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.IsdsStatPortType))
            {
                return new System.ServiceModel.EndpointAddress("https://ws1.mojedatovaschranka.cz/DS/DsManage");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return IsdsStatPortTypeClient.GetBindingForEndpoint(EndpointConfiguration.IsdsStatPortType);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return IsdsStatPortTypeClient.GetEndpointAddress(EndpointConfiguration.IsdsStatPortType);
        }
        
        public enum EndpointConfiguration
        {
            
            IsdsStatPortType,
        }
    }
}
